"""
Список в словаре.
Иногда бывает удобно поместить список в словарь, вместо того чтобы помещать словарь в список. Представьте, как бы вы
описали в программе заказанную пиццу. Если ограничиться только списком, сохранить удастся разве что список дополнений
к пицце. При использовании словаря список дополнений может быть всего лишь одним аспектом описания пиццы.
В следующем примере для каждой пиццы сохраняются два вида информации: тип теста и список дополнений. Список дополнений
представляет собой значение, связанное с ключом 'toppings'. Чтобы использовать элементы в списке, нужно указать имя
словаря и ключ 'toppings', как и для любого другого значения в словаре. Вместо одного значения будет получен список
дополнений:
"""

# Сохранение информации о заказанной пицце.
pizza = {
    'crust': 'thick',
    'toppings': ['mushrooms', 'extra cheese'],
}

# Описание заказа.
print("Вы заказали " + pizza['crust'] + "-пицца с корочкой " + "со следующими начинками:")
for topping in pizza['toppings']:
    print("\t" + topping)

"""
Работа начинается со словаря с информацией о заказанной пицце. С ключом в словаре 'crust' связано строковое значение 
'thick'. С другим ключом 'toppings' связано значение-список, в котором хранятся все заказанные дополнения. Также 
выводится сообщение с описание заказа перед созданием пиццы. Чтобы вывести список дополнений, используется ключ 
'toppings', а Python берёт список дополнений из словаря.
Вложение списка в словарь может применяться каждый раз, когда с одним ключом словаря должно быть связано  более одного 
значения. Если бы в предыдущем примере с языками программирования ответы сохранялись в списке, один участник опроса 
мог бы выбрать сразу несколько любимых языков. При переборе словаря значение, связанное с каждым человеком, 
представляло бы собой список языков (вместо одного языка). В цикле for словаря создаётся другой цикл для перебора 
списка языков, связанных с каждым участником:
"""
print("+" * 50)

favorite_languages = {
    'jen': ['python', 'ruby'],
    'sarah': ['c'],
    'edward': ['ruby', 'go'],
    'phil': ['python', 'haskell'],
}

for name, languages in favorite_languages.items():
    print("\n" + name.title() + " любимыми языками являются:")
    for language in languages:
        print("\t" + language.title())

print("+" * 50)

"""
Как видно, значение, связанное с каждым именем, теперь представляет собой список. У некоторых участников только один 
любимый язык программирования, у других таких языков несколько. При переборе словаря переменная с именем languages 
используется для хранения каждого значения из словаря, потому что мы знаем, что каждое значение будет представлять 
собой список. В основном цикле по элементам словаря другой цикл перебирает элементы списка любимых языков каждого 
участника.
Теперь каждый участник опроса может указать сколько угодно любимых языков программирования.  Чтобы дополнительно 
усовершенствовать программу, включите в начало цикла for словаря команду if для проверки того, выбрал ли данный 
участник более одного языка программирования (проверка основана на значении len(languages)). Если у участника только 
один любимый язык, текст сообщения изменяется для единственного числам (например, "Любимый язык Сары - Си").
ПРИМЕЧАНИЕ
ГЛУБИНА ВЛОЖЕНИЯ СПИСКОВ И СЛОВАРЕЙ НЕ ДОЛЖНА БЫТЬ СЛИШКОМ БОЛЬШОЙ. ЕСЛИ ВАМ ПРИХОДИТСЯ ВКЛАДЫВАТЬ ЭЛЕМЕНТЫ НА ГЛУБИНУ 
СУЩЕСТВЕННО БОЛЬШУЮ, ЧЕМ В ПРЕДЫДУЩИХ ПРИМЕРАХ, ИЛИ ЕСЛИ ВЫ РАБОТАЕТЕ С ЧУЖИМ КОДОМ СО ЗНАЧИТЕЛЬНОЙ ГЛУБИНОЙ ВЛОЖЕНИЯ, 
СКОРЕЕ ВСЕГО, У ЗАДАЧИ СУЩЕСТВУЕТ БОЛЕЕ ПРОСТОЕ РЕШЕНИЕ.
"""