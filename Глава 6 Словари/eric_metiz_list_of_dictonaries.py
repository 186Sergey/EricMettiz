"""
Список словарей.
Словарь alien_0 содержит разнообразную информацию об одном пришельце, но в нём нет места для хранения информации
о втором пришельце, не говоря уже о целом экране, забитом пришельцами. Как смоделировать флот вторжения? Например,
можно создать список пришельцев, в котором каждый элемент представляет собой словарь с информацией о пришельце.
Следующий код строит список из трёх пришельцев:
"""

alien_0 = {'color': 'green', 'points': 5}
alien_1 = {'color': 'yellow', 'points': 10}
alien_2 = {'color': 'red', 'points': 15}

aliens = [alien_0, alien_1, alien_2]

for alien in aliens:
    print(alien)
print("+" * 50)
"""
Сначала создаются три словаря, каждый из которых представляет отдельного пришельца. В каждый словарь заносится список 
с именем aliens. Наконец, программа перебирает список и выводит каждого пришельца:
    {'color': 'green', 'points': 5}
    {'color': 'yellow', 'points': 10}
    {'color': 'red', 'points': 15}

Конечно, в реалистичном примере будут использоваться более трёх пришельцев, которые будут генерироваться 
автоматически. В следующем примере функция range() создаёт флот из 30 пришельцев:
"""

# Создание пустого списка для хранения пришельцев.
aliens = []

# Создание 30 зелёных пришельцев.

for alien_number in range(30):
    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
    aliens.append(new_alien)
# Вывод первых 5 пришельцев:

for alien in aliens[:5]:
    print(alien)

print("+" * 50)

# Вывод количества созданных пришельцев.
print("Общее число пришельцев: " + str(len(aliens)))

"""
В начале примера список для хранения всех пришельцев, которые будут созданы, пуст. Функция range() возвращает 
множество чисел, которое просто сообщает Python, сколько раз должен повторяться цикл. При каждом выполнении цикла 
создаётся новый пришелец, который затем добавляется в список aliens. Срез списка используется для вывода первых 
пяти пришельцев, также выводится длина списка (для демонстрации того, что программа действительно сгенерировала весь 
флот из 30 пришельцев):
"""

print("+" * 50)
for alien in aliens[:5]:
    print(alien)

"""
Все пришельцы обладают одинаковыми характеристиками, но Python рассматривает каждого пришельца как отдельный объект, 
что позволяет изменять атрибуты каждого пришельца по отдельности.
Как работать с таким множеством? Представьте, что в этой игре некоторые пришельцы изменяют цвет и начинают двигаться 
быстрее. Когда приходит время смены цветов, можно воспользоваться циклом for и командой if для изменения цвета. 
Например, чтобы превратить первых трёх пришельцев в жёлтых, двигающихся со средней скоростью и приносящих игроку по 
10 очков, можно действовать так:
"""

# Создание пустого списка для хранения пришельцев.
aliens = []
# Создание 30 зелёных пришельцев.
for alien_number in range(0, 30):
    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
    aliens.append(new_alien)

for alien in aliens[0:3]:
    if alien['color'] == 'green':
        alien['color'] = 'yellow'
        alien['speed'] = 'medium'
        alien['points'] = 10

# Вывод первых 5 пришельцев:

for alien in aliens[0:5]:
    print(alien)

print("+" * 50)

"""
Чтобы изменить первых трёх пришельцев, мы преобразуем элементы среза, включающего только первых трёх пришельцев. В 
данный момент все пришельцы зелёные 'green', но так будет не всегда, поэтому мы пишем команду if, которая гарантирует, 
что изменяться будут только зелёные пришельцы. Если пришелец зелёный, то его цвет меняется на жёлтый ('yellow'), 
скорость на среднюю ('medium'), а награда увеличивается до 10 очков.
Цикл можно расширить, добавив блок elif для превращения жёлтых пришельцев в красных - быстрых и приносящих по 15 
очков. Не станем приводить весь код, а цикл выглядит так:
"""

for alien in aliens[0:5]:
    if alien['color'] == 'green':
        alien['color'] = 'yellow'
        alien['speed'] = 'medium'
        alien['points'] = 10
    elif alien['color'] == 'yellow':
        alien['color'] = 'red'
        alien['speed'] = 'fast'
        alien['points'] = 15

for alien in aliens[0:7]:
    print(alien)
print("+" * 50)

"""
Решение с хранением словарей в списке достаточно часто встречается тогда, когда каждый словарь содержит разные атрибуты 
одного объекта. Например, можно создать словарь для каждого пользователя сайта, как это было сделано в программе, и 
сохранить отдельные словари в списке с именем users. Все словари в списке должны иметь одинаковую структуру, чтобы 
можно было перебрать список и выполнить с каждым объектом словаря одни и те же операции.
"""